{"version":3,"sources":["components/ProjectCard.js","pages/Home.js","pages/User.js","App.js","serviceWorker.js","index.js"],"names":["ProjectCard","username","projectName","visitData","className","href","class","smooth","autoDraw","autoDrawDuration","autoDrawEasing","data","gradient","radius","strokeWidth","strokeLinecap","Home","User","match","params","repo","About","Topics","to","url","path","component","Topic","exact","render","topicId","Boolean","window","location","hostname","ReactDOM","src","alt","width","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b044716.chunk.js","sourcesContent":["import React from 'react';\nimport './ProjectCard.css';\nimport Trend from 'react-trend';\n\n\nconst ProjectCard = ({username, projectName, visitData}) => (\n<div className=\"card-container\">\n  <div className=\"card-description\">\n    <a href={username}>{username}</a>\n      <span className=\"path-divider\">/</span>\n    <strong>\n      <a href={`${username}/${projectName}`}>{projectName}</a>\n    </strong>\n  </div>\n\n  <div class=\"project-trend\">\n    <Trend\n      smooth\n      autoDraw\n      autoDrawDuration={2000}\n      autoDrawEasing=\"ease-out\"\n      data={[0,2,5,9,5,10,3,5,0,0,1,8,2,9,0]}\n      gradient={['#d7ecad', '#9cd696', '#2ebc4f']}\n      radius={0}\n      strokeWidth={1.7}\n      strokeLinecap={'square'}\n    />\n  </div>\n</div>)\n\nexport default ProjectCard;","import React from \"react\";\nimport ProjectCard from '../components/ProjectCard';\nimport { Link } from \"react-router-dom\";\nimport './Home.css'\n\nfunction Home () {\n return (\n  <div>\n    <div className=\"home-hero\">\n      <h1 className=\"home-slogan\">Thorough analytics for your GitHub repos</h1>\n      <button className=\"home-signin-btn\">Sign in with GitHub</button>\n      <div className=\"home-features\">\n        <div className=\"home-feature\">\n          <h4 className=\"home-feature-title\">Better traffic data</h4>\n          <p className=\"home-feature-description\">\n            Track traffic to GitHub Repos for longer than 14 days.\n          </p>\n        </div>\n        <div className=\"home-feature\">\n          <h4 className=\"home-feature-title\">Understand your users</h4>\n          <p className=\"home-feature-description\">\n            Analyze history, locations of Star, Clone, Fork data of your GitHub Repos\n          </p>\n        </div>\n      </div>\n\n    </div>\n\n    <div className=\"home-container\">\n      \n      <h2 className=\"home-example-title\">Example repos using <strong>Repo Analytics</strong></h2>\n      <div className=\"home-examples\">\n        <div className=\"home-box\">\n          <ProjectCard username=\"repo-analytics\" projectName=\"repo-analytics.github.io\" />\n        </div>\n        <div className=\"home-box\">\n          <ProjectCard username=\"timqian\" projectName=\"chart.xkcd\" />\n        </div>\n        <div className=\"home-box\">\n          <ProjectCard username=\"t9tio\" projectName=\"open-source-jobs\" />\n        </div>\n        <div className=\"home-box\">\n          <ProjectCard username=\"timqian\" projectName=\"star-history\" />\n        </div>\n      </div>\n    </div>\n\n    <hr className=\"home-hr\"/>\n    <div className=\"home-container\">\n      <h2 className=\"home-example-title\">What data do we analyze</h2>\n    </div>\n  </div>\n  );\n}\n\nexport default Home;","import React from \"react\";\n\n\nfunction User ({match}) {\n  return <div>\n    <h3>{match.params.username}</h3>\n    {match.params.repo}\n  </div>\n}\n\nexport default User;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport './App.css';\nimport Home from './pages/Home';\nimport User from './pages/User';\n\n\nexport default function BasicExample() {\n  return (\n    <Router>\n      <header>\n        <div className=\"header-left\">\n          <img src=\"/logo.png\" alt=\"logo\" width=\"30px\"/>\n          &nbsp;\n          <Link to=\"/\" className=\"header-link\">Repo Analytics</Link>\n        </div>\n        <div>\n          <Link to=\"/about\" className=\"header-link\">Sign in with GitHub</Link>\n          {/* <Link to=\"/topics\">Topics</Link> */}\n        </div>\n      </header>\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/topics\" component={Topics} />\n\n      <Route exact path=\"/:username\" component={User} />\n      <Route exact path=\"/:username/:repo\" component={User} />\n    </Router>\n  );\n}\n\nfunction About() {\n  return (\n    <div>\n      <h2>About</h2>\n    </div>\n  );\n}\n\nfunction Topics({ match }) {\n  return (\n    <div>\n      <h2>Topics</h2>\n      <ul>\n        <li>\n          <Link to={`${match.url}/rendering`}>Rendering with React</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/props-v-state`}>Props v. State</Link>\n        </li>\n      </ul>\n\n      <Route path={`${match.path}/:topicId`} component={Topic} />\n      <Route\n        exact\n        path={match.path}\n        render={() => <h3>Please select a topic.</h3>}\n      />\n    </div>\n  );\n}\n\nfunction Topic({ match }) {\n  return (\n    <div>\n      <h3>{match.params.topicId}</h3>\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}